start virtual environment 
    py -3 -m venv venv

pip install fastapi[all]#adds all the extra tools
async function
    main reason to use it is for asyncronous operations

Start server
    uvicorn main:app --reload
    uvicorn app.main:app --reload  
To consider:
    When doing posts we need to limit what the user can post. Also we need to validate the data, and we want 
    the user to send the data in a schema we expect

http
    http status codes https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
    http methods

ValidatioN
    done with pydantic

Pydantic
    done with pydantic
    Convert pydantic model to dict
        .dict()

CRUD: create read, Update, Delete
    #Example:
    @app.post("/posts")# create
    @app.get("/posts/{id}") # read get
    @app.get("/posts")  #read all get
    @app.put("/posts/{id}") #update
    @app.delete("/posts/{id}") #delete




SQL

    SELECT * from products; the * looks for everything in the table "products"
    SELECT name from products;
    SELECT id,name from products;

    #Rename
    Select id AS products_id FROM products;

    #Filter
    SELECT * FROM products WHERE id = 3;
    #For strings (single quotes)
    SELECT * FROM products WHERE name = 'TV'

    #Conditions
    SELECT * FROM products WHERE price <= 150;
    #NOT
    SELECT * FROM products WHERE inventory != 0;
    SELECT * FROM products WHERE inventory <> 0;

    #Multiple operators
    SELECT * FROM products WHERE inventory > 0 AND price > 20;
    SELECT * FROM products WHERE inventory > 0 OR price > 20;

    #IN operator , to look for multiple things for example search for ids 1-3
    SELECT * FROM products WHERE id IN(1,2,3) ;

    #We have multiple items with same name. Search for them
    SELECT * FROM products WHERE name LIKE 'TV%' ;
    SELECT * FROM products WHERE name LIKE 'r%' ;
    #Also that ends with
    SELECT * FROM products WHERE name LIKE '%e' ;
    #Search for something containing those letters
    SELECT * FROM products WHERE name LIKE '%em%' ;

    #Ordering
    SELECT * FROM products ORDER BY price;
    SELECT * FROM products ORDER BY price DESC; #Descending
    # Insert a second thing to consider for sorting in case of tie
    SELECT * FROM products ORDER BY inventory DESC, price;

    #Limits the amount of results
    SELECT * FROM products WHERE price<50 ORDER BY price DESC LIMIT 1;
    #Skip rows with OFFSET
    SELECT * FROM products WHERE price<50 ORDER BY id DESC LIMIT 5 OFFSET 2;

    #Adding entries
    INSERT INTO products (price, name, inventory) VALUES (10000, 'car', 1000)
    Showing results
    INSERT INTO products (price, name, inventory) VALUES (10000, 'car', 1000) returning * ;
    #Adding multiple
    INSERT INTO products (price, name, inventory) VALUES (10000, 'car', 1000),(50,'laptop',25),(60,'monitor',4) returning * ;
    INSERT INTO products (price, name, inventory) VALUES (10000, 'car', 1000),(50,'laptop',25),(60,'monitor',4) returning id, created_at, name ;

    #Delete
    DELETE FROM products WHERE id = 10 ;
    #Get specific entry before deletion
    DELETE FROM products WHERE id = 11 RETURNING * ;

    #Update
    UPDATE products SET name='Flower tortilla', price=40 WHERE id=25 ;
    #Returning 
    UPDATE products SET is_sale = true WHERE id=21 RETURNING *;
    #Condition
    UPDATE products SET is_sale = true WHERE id>15 RETURNING *;

Query Parameters:
    Adding functions to the query:
    def get_posts(db: Session = Depends(get_db), current_user:int = Depends (oath2.get_current_user),
    limit :int = 10, skip: int = 0):
    posts=db.query(models.Post).limit(limit).offset(skip).all()

    .limit adds the amount of results shown
    .offset is where to start
    .filter(models.Post.title.contains(search)
    
Environment varialbles: here you can create any variable to later access
    import os 
    path= os.getenv("Path")
    print(path)

#Count
    SELECT users.id, COUNT(posts.id) FROM posts RIGHT JOIN users ON posts.owner_id = users.id group by users.id;
    SELECT posts.*, COUNT(votes.post_id) as likes FROM posts LEFT JOIN votes ON posts.id = votes.post_id GROUP BY posts.id where post_id=10;

 

ORM Object-relational-mapping
    Adding functions to the query:
    def get_posts(db: Session = Depends(get_db), current_user:int = Depends (oath2.get_current_user),
    limit :int = 10, skip: int = 0):
    posts=db.query(models.Post).limit(limit).offset(skip).all()

 

    .limit adds the amount of results shown
    .offset is where to start
    
Alembic Database Migration tool
    alembic init alembic
    alembic revision -m "your message for your revision" #will create your revision file to create stuff
    #documentation at : alembic API details, DDL internals
    alembic head # gives info on the latest revision
    alembic upgrade --help
    alembic upgrade head #upgrades to the last version
    alembic upgrade "number"
    alembic downgrade "number"
    alembic downgrade -1
    alembic revision --autogenerate -m "auto-vote"


Cors : cross origin resource sharing
    fetch('http://localhost:8000/').then(res => res.json()).then(console.log) #using inspect
    Documentation on fastapi
    from fastapi.middleware.cors import CORSMiddleware

    app.add_middleware(
    CORSMiddleware,
    allow_origins=[],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"], )

Deploying Heroku
    https://devcenter.heroku.com/articles/getting-started-with-python#define-a-procfile
    https://fastapi-jms.herokuapp.com/
    git push heroku main
    heroku apps:info fastapi-jms
    heroku logs -t
    heroku ps:restart
    heroku ps --help
    heroku addons:create heroku-postgresql:hobby-dev
    #run a command in our heroku instance:
    heroku run "alembic upgrade head" 

    #making changes:
        #make the changes in your code
        git add  and the git push heroku main

        #if your make changes in your Database
        heroku run "alembic ..."


digitalocean
    Root
    pw: KiNdle2018!a
    jms
    pw: Kindle2018

    connect to a device in cmd
    ssh root@207.154.252.183 and insert the password
    you are inside, check ls

    Ubuntu new machine
        sudo apt update && sudo apt upgrade -y
        #install python (python3 --version)
        sudo apt install python3-pip
        sudo pip3 install virtualenv
        sudo apt install postgresqul postgresql-contrib -y

        #other commands
            whoami
            cd ~ takes you to home directory
            mkdir #create a directory
            virtualenv venv #create virtual environment
            source venv/bin/activate #activate the virtualenvironment
            ls -la shows all directories
            clone from git:
            git clone https://oauth-key-goes-here@github.com/username/repo.git
            cat requirements.txt #opens the file
            pip install -r requirements.txt
            sudo reboot
            :wq #write quit
            ps -aef | grep -i gunicorn

            #Create environment varialbles
                export variablename=value
                printenv #shows all environment varialbles
                unset variablename #removes the env variable

            #create file
                touch .env

            #open file
                vi .env
                inside here we could add all the variables with the export variablename=value

            #setting environment variables in a good way
                set -o allexport; source /home/jms/.env; set +o allexport
                #to save them when rebooting
                in the main directory go to
                vi .profile # and paste the set-o... in the last line



            

        su -"name" #changes you to a different user
        sudo cat /etc/passwd #reveals all users
        #connect to CLI
        psql
        psql --help
        Log into the database
        psql -U postgres 
        \password postgres #to change the password por that user
        #exit
        \q
        #navigate into the postgress folder: in linux you usually navigate to etc folder
        #enter postgresql.conf file
        sudo vi postgresql.conf
        #inside it add the list_addresses='*' (under connection and authentication) :wq to exit
        #enter pg_hba.conf file
        sudo vi ...
        #change all passwords to md5 and the ipv4 local connection to 0.0.0.0/0 to allow all
        #and in ipv6 ::/0
        #restart application
        systemctl restart postgresql

        #now log in again
        psql -U postgres

        #Create new user
            adduser jms
            #change to that user
            su - jms
            ssh jms@207.154.252.183
        #Add root privileges to this user
            usermod -aG sudo jms

    #Start the app
    uvicorn app.main:app

    #Create our Database
    alembic upgrade head 
    uvicorn --host 0.0.0.0 app.main:app
    #problem here is that it will not autostart in case of failure so we need to use a process manager
        pip install gunicorn
        gunicorn --help
        gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000

        #create a service
            cd /etc/systemd/system/
            ls
            #now you see all the services
            sudo vi api.service #to create and open a file called api.service
            paste the contents of gunivorn.service
            systemctl start api #start the service
            systemctl status api
            #make it start automatically on reboot:
            sudo systemctl enable api







        
